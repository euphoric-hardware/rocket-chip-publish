#!/usr/bin/env python

import subprocess
import fileinput
import sys
import urllib.request
from pathlib import Path

from helpers import run_cmd, run_cmd_capture, mill_sc_version, \
        get_new_version, replace_version_rc, replace_version_libs


if __name__ == "__main__":
    cwd = Path.cwd()

    # clone rocket and its submodules
    run_cmd("git clone https://github.com/chipsalliance/rocket-chip.git", cwd=cwd)

    rc_repo = cwd / "rocket-chip"
    assert rc_repo.exists()
    assert rc_repo.is_dir()

    # if a specific rocket-chip hash is requested, check it out
    if len(sys.argv) == 2 and sys.argv[1]:
        rc_hash = sys.argv[1]
        run_cmd(f"git checkout {rc_hash}", cwd=rc_repo)
    else:
        # Master is the branch used for publishing, dev might break frequently
        run_cmd(f"git checkout master", cwd=rc_repo)

    rc_mill_sc = (rc_repo / "common.sc").read_text().split('\n')
    rc_version = mill_sc_version(rc_mill_sc)
    git_hash = run_cmd_capture("git rev-parse --short HEAD", cwd=rc_repo)
    new_version = get_new_version(git_hash, rc_version)

    # check that this rocket version isn't already published to sonatype snapshots
    try:
        urllib.request.urlopen(f"https://oss.sonatype.org/content/repositories/snapshots/edu/berkeley/cs/rocketchip_2.13/{new_version}/").read()
    except urllib.error.HTTPError as e:
        # Return code error (e.g. 404, 501, ...)
        assert e.code == 404, f"Sonatype URL GET returned something other than 200/404 {e.url} -> {e.code}"
        already_published = False
    except urllib.error.URLError as e:
        # Not an HTTP-specific error (e.g. connection refused)
        print('URLError: {}'.format(e.reason))
        sys.exit(1)
    else:
        already_published = True

    if already_published:
        print(f"Version {new_version} is already published - exiting")
        sys.exit(0)

    # clone rocket submodules
    run_cmd("git submodule update --init cde hardfloat", cwd=rc_repo)

    # Patch common.sc with the desired rocket-chip version
    (rc_repo / "common.sc").write_text('\n'.join(replace_version_rc(rc_mill_sc, new_version)))

    # Patch hardfloat/build.sc and cde/build.sc with the matching version
    #   the versions of all rocket subprojects (cde, hardfloat, rocket-macros) are forced to the rocket version
    for path in [(rc_repo / "hardfloat" / "build.sc"), (rc_repo / "cde" / "build.sc")]:
        sc_str = path.read_text().split('\n')
        path.write_text('\n'.join(replace_version_libs(sc_str, new_version)))

    run_cmd("echo $PGP_SECRET | base64 --decode > gpg_key", cwd=cwd)
    run_cmd("gpg --import --no-tty --batch --yes gpg_key", cwd=cwd)
    run_cmd("rm gpg_key", cwd=cwd)

    for project in ["rocketchip", "hardfloat", "cdeRocket", "rocketchip.macros"]:
        run_cmd(f"mill mill.scalalib.PublishModule/publishAll --publishArtifacts {project}.publishArtifacts --sonatypeCreds $SONATYPE_USERNAME:$SONATYPE_PASSWORD --gpgArgs --passphrase=$PGP_PASSPHRASE,--batch,-a,-b,--pinentry-mode,loopback,--no-tty,--yes", cwd=rc_repo)
    sys.exit(0)

