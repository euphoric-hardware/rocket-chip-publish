#!/usr/bin/env python

import subprocess
import fileinput
import sys
import urllib.request
from pathlib import Path

from helpers import run_cmd, run_cmd_capture, mill_sc_version, \
        get_new_version, replace_version_rc, replace_version_libs


if __name__ == "__main__":
    cwd = Path.cwd()

    rc_repo = cwd / "rocket-chip"
    assert rc_repo.exists()
    assert rc_repo.is_dir()

    # if a specific rocket-chip hash is requested, check it out
    if len(sys.argv) == 2 and sys.argv[1]:
        rc_hash = sys.argv[1]
        run_cmd(f"git checkout {rc_hash}", cwd=rc_repo)
    else:
        # Master is the branch used for publishing, dev might break frequently
        run_cmd(f"git checkout master", cwd=rc_repo)

    # Patch the rocket-chip build.sc with the versioning hacks and change org to edu.berkeley.cs
    run_cmd("git apply rocket-chip.patch --directory rocket-chip", cwd=cwd)
    # clone rocket submodules
    run_cmd("git submodule update --init cde hardfloat", cwd=rc_repo)

    rc_500_version = run_cmd_capture("mill show rocketchip[5.0.0].publishVersion", cwd=rc_repo)
    rc_360_version = run_cmd_capture("mill show rocketchip[3.6.0].publishVersion", cwd=rc_repo)
    print(rc_500_version, rc_360_version)

    # check that this rocket version isn't already published to sonatype snapshots
    def check_if_published(version: str, chiselVersion: str) -> bool:
        try:
            urllib.request.urlopen(f"https://oss.sonatype.org/content/repositories/snapshots/edu/berkeley/cs/rocketchip-{chiselVersion}_2.13/{version}/").read()
        except urllib.error.HTTPError as e:
            # Return code error (e.g. 404, 501, ...)
            assert e.code == 404, f"Sonatype URL GET returned something other than 200/404 {e.url} -> {e.code}"
            return False
        except urllib.error.URLError as e:
            # Not an HTTP-specific error (e.g. connection refused)
            print('URLError: {}'.format(e.reason))
            sys.exit(1)
        else:
            return True

    if check_if_published(rc_500_version, "5.0.0"):
        print(f"Version {rc_500_version} is already published - exiting")
        sys.exit(0)

    if check_if_published(rc_360_version, "3.6.0"):
        print(f"Version {rc_360_version} is already published - exiting")
        sys.exit(0)

    run_cmd("echo $PGP_SECRET | base64 --decode > gpg_key", cwd=cwd)
    run_cmd("gpg --import --no-tty --batch --yes gpg_key", cwd=cwd)
    run_cmd("rm gpg_key", cwd=cwd)

    for project in ["rocketchip[5.0.0]", "rocketchip[3.6.0]", "hardfloat[5.0.0]", "hardfloat[3.6.0]", "cde", "macros"]:
        run_cmd(f"mill mill.scalalib.PublishModule/publishAll --publishArtifacts {project}.publishArtifacts \
                --sonatypeCreds $SONATYPE_USERNAME:$SONATYPE_PASSWORD --gpgArgs \
                --passphrase=$PGP_PASSPHRASE,--batch,-a,-b,--pinentry-mode,loopback,--no-tty,--yes", cwd=rc_repo)
    sys.exit(0)

